// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id               String    @id @default(uuid())
  name             String
  email            String    @unique
  password         String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  subjectId        String?
  subject          Subject?  @relation(fields: [subjectId], references: [id])
  aiCharacterId    String?
  aiCharacter      AICharacter? @relation(fields: [aiCharacterId], references: [id])
  aiCustomName     String?   // AI的自定义名称
  userNickname     String?   // 用户昵称
  studyGoals       StudyGoal[]
  studyRecords     StudyRecord[]
  notes            Note[]
  examAttempts     ExamAttempt[]
  customVoice      String?   // 自定义语音文件路径
  customFace       String?   // 自定义面部图像路径
  currentStage     String?   // 当前学习阶段
  dailyStudyGoal   Float?    // 每日学习目标时长（小时）
  totalPoints      Int       @default(0) // 累计积分
  chatHistories    ChatHistory[]
  role             String    @default("user") // 用户角色：user/admin
  knowledgeEntries KnowledgeEntry[] // 管理员创建的知识条目
  documents        Document[] // 上传的文档
  processingJobs   ProcessingJob[] // 处理任务
  dailyStudyGoals  DailyStudyGoal[] // 添加到每日学习目标的关系
}

// AI角色模型
model AICharacter {
  id          String @id @default(uuid())
  name        String // 角色名称
  description String // 角色描述
  gender      String // 性别
  type        String // 类型（如萝莉、御姐等）
  avatarUrl   String // 头像URL
  users       User[]
}

// 科目模型
model Subject {
  id               String    @id @default(uuid())
  name             String    // 科目名称(考公/教资/法考)
  subcategories    SubCategory[]
  users            User[]
  knowledgeBases   KnowledgeBase[]
  exams            Exam[]
  knowledgeEntries KnowledgeEntry[] // 知识条目
  documents        Document[] // 知识文档
  knowledgePoints  KnowledgePoint[] // 知识点
}

// 科目子类别
model SubCategory {
  id               String    @id @default(uuid())
  name             String    // 子类别名称
  subject          Subject   @relation(fields: [subjectId], references: [id])
  subjectId        String
  knowledgeBases   KnowledgeBase[]
  exams            Exam[]
  knowledgeEntries KnowledgeEntry[] // 知识条目
  documents        Document[] // 知识文档
  knowledgePoints  KnowledgePoint[] // 知识点
}

// 知识库模型(旧版)
model KnowledgeBase {
  id               String    @id @default(uuid())
  title            String
  content          String
  fileUrl          String?   // 文件URL
  subject          Subject   @relation(fields: [subjectId], references: [id])
  subjectId        String
  subCategory      SubCategory? @relation(fields: [subCategoryId], references: [id])
  subCategoryId    String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// 知识条目模型(新版)
model KnowledgeEntry {
  id               String    @id @default(uuid())
  title            String
  content          String    // 内容
  tags             String    // 标签，JSON字符串
  embeddings       String?   // 向量嵌入，JSON字符串
  author           User      @relation(fields: [authorId], references: [id])
  authorId         String
  subject          Subject   @relation(fields: [subjectId], references: [id])
  subjectId        String
  subCategory      SubCategory? @relation(fields: [subCategoryId], references: [id])
  subCategoryId    String?
  documentId       String?  // 关联的文档ID
  document         Document? @relation(fields: [documentId], references: [id])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  viewCount        Int       @default(0) // 查看次数
  importance       Int       @default(1) // 重要性级别(1-5)
  processingStepId String?   @unique
  processingStep   ProcessingStep? @relation(fields: [processingStepId], references: [id])
}

// 文档模型
model Document {
  id               String    @id @default(uuid())
  title            String
  description      String?
  fileName         String?
  fileType         String?   // pdf, docx, txt等
  fileUrl          String?   // 存储路径
  fileSize         Int?      // 文件大小
  pageCount        Int?      // 页数
  uploadedBy       User      @relation(fields: [uploadedById], references: [id])
  uploadedById     String
  subject          Subject   @relation(fields: [subjectId], references: [id])
  subjectId        String
  subCategory      SubCategory? @relation(fields: [subCategoryId], references: [id])
  subCategoryId    String?
  knowledgeEntries KnowledgeEntry[] // 从该文档提取的知识条目
  knowledgePoints  KnowledgePoint[] // 从该文档提取的知识点
  processed        Boolean   @default(false) // 是否已处理
  processingStatus String?   // 处理状态
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  extractedText    String?   // 提取的文本内容
  processingJob    ProcessingJob? @relation(fields: [processingJobId], references: [id])
  processingJobId  String?
  processingSteps  ProcessingStep[] // 处理步骤
}

// 知识点模型
model KnowledgePoint {
  id               String    @id @default(uuid())
  title            String
  content          String
  importance       String    // HIGH, MEDIUM, LOW
  document         Document  @relation(fields: [documentId], references: [id])
  documentId       String
  subject          Subject   @relation(fields: [subjectId], references: [id])
  subjectId        String
  subCategory      SubCategory? @relation(fields: [subCategoryId], references: [id])
  subCategoryId    String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  embeddings       String?   // 向量嵌入，JSON字符串
  viewCount        Int       @default(0) // 查看次数
}

// 知识检索日志
model KnowledgeSearchLog {
  id               String    @id @default(uuid())
  query            String
  results          String    // 搜索结果，JSON字符串
  responseTime     Int       // 响应时间(毫秒)
  timestamp        DateTime  @default(now())
  userQuery        String    // 用户原始查询
  aiResponse       String    // AI响应
  relevanceScore   Float?    // 相关性得分
}

// 学习目标模型
model StudyGoal {
  id               String    @id @default(uuid())
  user             User      @relation(fields: [userId], references: [id])
  userId           String
  title            String
  description      String?
  targetDate       DateTime
  completed        Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// 学习记录模型
model StudyRecord {
  id               String    @id @default(uuid())
  user             User      @relation(fields: [userId], references: [id])
  userId           String
  date             DateTime  @default(now())
  duration         Float     // 学习时长(小时)
  websites         String    // 访问的网站列表，使用逗号分隔
  completed        Boolean   @default(false) // 是否完成当日目标
}

// 笔记模型
model Note {
  id               String    @id @default(uuid())
  user             User      @relation(fields: [userId], references: [id])
  userId           String
  title            String
  content          String
  aiResponse       String?   // AI回复内容
  mindMap          String?   // 思维导图JSON字符串
  attachments      Attachment[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// 附件模型
model Attachment {
  id               String    @id @default(uuid())
  note             Note      @relation(fields: [noteId], references: [id])
  noteId           String
  fileUrl          String
  fileType         String    // 文档/图片/视频
  createdAt        DateTime  @default(now())
}

// 考试模型
model Exam {
  id               String    @id @default(uuid())
  title            String
  description      String?
  subject          Subject   @relation(fields: [subjectId], references: [id])
  subjectId        String
  subCategory      SubCategory? @relation(fields: [subCategoryId], references: [id])
  subCategoryId    String?
  year             Int?      // 年份
  questions        Question[]
  examAttempts     ExamAttempt[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// 问题模型
model Question {
  id               String    @id @default(uuid())
  exam             Exam      @relation(fields: [examId], references: [id])
  examId           String
  content          String
  options          String    // 选项，使用JSON字符串存储
  correctAnswer    String    // 正确答案
  explanation      String?   // 解析
  knowledgePoints  String    // 相关知识点，使用JSON字符串存储
  answerAttempts   AnswerAttempt[]
}

// 考试尝试模型
model ExamAttempt {
  id               String    @id @default(uuid())
  user             User      @relation(fields: [userId], references: [id])
  userId           String
  exam             Exam      @relation(fields: [examId], references: [id])
  examId           String
  startTime        DateTime  @default(now())
  endTime          DateTime?
  score            Float?
  answerAttempts   AnswerAttempt[]
}

// 答题尝试模型
model AnswerAttempt {
  id               String    @id @default(uuid())
  examAttempt      ExamAttempt @relation(fields: [examAttemptId], references: [id])
  examAttemptId    String
  question         Question  @relation(fields: [questionId], references: [id])
  questionId       String
  userAnswer       String
  isCorrect        Boolean
}

// 聊天历史记录
model ChatHistory {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  isUser    Boolean  @default(true) // 是否为用户消息
  createdAt DateTime @default(now())
}

// 文档处理任务
model ProcessingJob {
  id             String          @id @default(uuid())
  user           User            @relation(fields: [userId], references: [id])
  userId         String
  status         String          // pending, processing, completed, failed
  startTime      DateTime        @default(now())
  endTime        DateTime?
  documents      Document[]      // 关联文档
  processingSteps ProcessingStep[] // 处理步骤
  createdAt      DateTime        @default(now())
}

// 处理步骤
model ProcessingStep {
  id               String    @id @default(uuid())
  processingJob    ProcessingJob @relation(fields: [processingJobId], references: [id])
  processingJobId  String
  document         Document? @relation(fields: [documentId], references: [id])
  documentId       String?
  knowledgeEntry   KnowledgeEntry?
  stepName         String    // extraction, embedding, etc
  status           String    // pending, processing, completed, failed
  startTime        DateTime  @default(now())
  endTime          DateTime?
  message          String?   // 错误信息或状态消息
}

// 每日学习目标模型
model DailyStudyGoal {
  id               String    @id @default(uuid())
  user             User      @relation(fields: [userId], references: [id])
  userId           String
  date             DateTime  @default(now())
  chatCount        Int       @default(0)  // 聊天次数
  noteCount        Int       @default(0)  // 创建笔记数量
  quizCount        Int       @default(0)  // 做题数量
  studyTime        Float     @default(0)  // 学习时长(小时)
  
  @@unique([userId, date], name: "userId_date")
} 