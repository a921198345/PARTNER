全流程开发梳理（模块化 & 四阶段）

下面结合“前端 / 后端 / 数据库”三大模块，以及“样式 → 交互 → 功能 → 数据”四个阶段，给出详细的开发流程。

1. 前端模块
1.1 样式（Style）
- 搭建基础布局：全局 globals.css 引入 Tailwind，配置主题色、断点；  
- 页面骨架：在 pages/index.tsx 和 pages/chat/[role].tsx 写最简静态结构；  
- CSS 细节：使用 Tailwind 类名或抽象成 @apply，调整边距、字体、配色。  

1.2 交互（Interaction）
- 组件拆分：为每个可复用 UI（RoleCard、ChatBubble、FileUploader）创建组件；  
- 交互事件：给按钮、输入框绑定 onClick / onChange，创建空函数占位；  
- 动态路由：在 RoleCard 点击时调用 useRouter().push('/chat/[role]', \/chat/${role}\)。  

1.3 功能（Functionality）
- 本地状态：在聊天页用 useState 管理消息列表和输入值；  
- API 调用：封装 lib/deepseek.ts，实现 askDeepseek(role, question)，返回回答；  
- 上传流程：在 FileUploader 通过 fetch('/api/upload', formData) 上传文件，取回 URL。  

1.4 数据（Data）
- 数据格式：约定消息对象 { id, from: 'user'|'ai', content: string, time: Date }；  
- 本地 mock：先用假数据测试渲染、交互；  
- 与后端对接：输入框发送后，调用 DeepSeek API 并把返回数据加入消息列表。  


---

2. 后端模块
本质也是 CRUD，只是面向管理员或服务端调用。  

2.1 样式（Style）
- 后台面板无需精致样式，可用简单的 HTML/Markdown+Ant Design 或 Tailwind；  

2.2 交互（Interaction）
- 管理界面：文件上传和列表展示，按钮触发对应 API；  

2.3 功能（Functionality）
- Next.js API Routes：  
  - /api/upload.ts – 接收 multipart，调用 Supabase SDK 上传；  
  - /api/deepseek.ts – 接受 role 和 question，调用 DeepSeek；  
- 错误处理：统一捕捉并返回 { error, code }；  

2.4 数据（Data）
- 存储配置：环境变量 SUPABASE_…、DEEPSEEK_API_KEY；  
- 日志记录：可选把请求与响应写入 Supabase 或第三方日志库；  


---

3. 数据库模块
- 选型：Supabase PostgreSQL + Storage；  
- 建表示例：  
CREATE TABLE messages (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  role text,
  from text,
  content text,
  created_at timestamp default now()
  );
- 连接方式：  
- 前端无需直连，只通过 API Routes；  
- 后端通过 `createClient()` 在 `lib/supabase.ts` 中初始化。  

---
4. 集成与部署
1. 本地调试：npm run dev → 验证样式、交互、功能、数据流；  
2. 版本控制：每完成一个阶段即提交 Git 分支；  
3. CI/CD：推送到 GitHub，Vercel 自动构建 & 部署；  
4. 环境变量配置：在 Vercel 控制台填入 Supabase & DeepSeek Key； 
